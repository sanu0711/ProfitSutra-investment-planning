from django.test import TestCase

# Create your tests here.
# import pandas as pd
# from .models import StockData

# def read_data():
#     colunm_name = ['s.no','stock_name', 'nsecode', 'bsecode', 'isin', 'industry_name', 'current_price', 'market_capitalization_in_crores', 'trendlyne_durability_score', 'trendlyne_valuation_score', 'trendlyne_momentum_score', 'dvm_classification_text', 'prev_day_trendlyne_durability_score', 'prev_day_trendlyne_valuation_score', 'prev_day_trendlyne_momentum_score', 'prev_week_trendlyne_durability_score', 'prev_week_trendlyne_valuation_score', 'prev_week_trendlyne_momentum_score', 'prev_month_trendlyne_durability_score', 'prev_month_trendlyne_valuation_score', 'prev_month_trendlyne_momentum_score', 'normalized_momentum_score', 'operating_revenue_qtr', 'net_profit_qtr', 'revenue_growth_qtr_yoy_percent', 'net_profit_qtr_growth_yoy_percent', 'sector_revenue_growth_qtr_yoy_percent', 'sector_net_profit_growth_qtr_yoy_percent', 'sector_revenue_growth_qtr_qoq_percent', 'net_profit_qoq_growth_percent', 'sector_net_profit_growth_qtr_qoq_percent', 'operating_profit_margin_qtr_percent', 'operating_profit_margin_qtr_1yr_ago_percent', 'operating_revenue_ttm', 'net_profit_ttm', 'operating_revenue_annual', 'net_profit_annual', 'revenue_growth_annual_yoy_percent', 'net_profit_annual_yoy_growth_percent', 'sector_revenue_growth_annual_yoy_percent', 'cash_from_financing_annual_activity', 'cash_from_investing_activity_annual', 'cash_from_operating_activity_annual', 'net_cash_flow_annual', 'sector_name', 'latest_financial_result', 'result_announced_date', 'pe_ttm_price_to_earnings', 'oneyr_forward_forecaster_estimates_pe', 'pe_3yr_average', 'pe_5yr_average', 'percent_days_traded_below_current_pe_price_to_earnings', 'sector_pe_ttm', 'industry_pe_ttm', 'peg_ttm_pe_to_growth', 'oneyr_forward_forecaster_estimates_peg', 'sector_peg_ttm', 'industry_peg_ttm', 'price_to_book_value', 'percent_days_traded_below_current_price_to_book_value', 'sector_price_to_book_ttm', 'industry_price_to_book_ttm', 'basic_eps_ttm', 'eps_ttm_growth_percent', 'roe_annual_percent', 'sector_return_on_equity_roe', 'industry_return_on_equity_roe', 'roa_annual_percent', 'sector_return_on_assets', 'industry_return_on_assets', 'piotroski_score', 'day_mfi', 'day_rsi', 'day_macd', 'day_macd_signal_line', 'day_sma_30', 'day_sma_50', 'day_sma_100', 'day_sma_200', 'day_sma_5', 'day_ema_12', 'day_ema_20', 'day_ema_50', 'day_ema_100', 'beta_1month', 'beta_3month', 'beta_1year', 'beta_3year', 'day_roc21', 'day_roc125', 'day_atr', 'day_adx', 'pivot_point', 'first_resistance_r1', 'first_resistance_r1_to_price_diff_percent', 'second_resistance_r2', 'second_resistance_r2_to_price_diff_percent', 'third_resistance_r3', 'third_resistance_r3_to_price_diff_percent', 'first_support_s1', 'first_support_s1_to_price_diff_percent', 'second_support_s2', 'second_support_s2_to_price_diff_percent', 'third_support_s3', 'third_support_s3_to_price_diff_percent', 'day_low', 'day_high', 'week_low', 'week_high', 'month_low', 'month_high', 'qtr_low', 'qtr_high', 'oneyr_low', 'oneyr_high', 'day_volume', 'week_volume_avg', 'month_volume_avg', 'threemonth_volume_avg', 'sixmonth_volume_avg', 'year_volume_avg', 'consolidated_end_of_day_volume', 'consolidated_previous_end_of_day_volume', 'consolidated_5day_average_end_of_day_volume', 'consolidated_30day_average_end_of_day_volume', 'consolidated_6m_average_end_of_day_volume', 'day_volume_multiple_of_week', 'vol_day_times_vol_week_strong', 'consolidated_day_volume', 'vwap_day', 'promoter_holding_latest_percentage', 'promoter_holding_change_qoq_percentage', 'promoter_holding_change_4qtr_percentage', 'promoter_holding_change_8qtr_percentage', 'promoter_holding_pledge_percentage_qtr', 'promoter_pledge_change_qoq_percent', 'mf_holding_current_qtr_percentage', 'mf_holding_change_qoq_percentage', 'mf_holding_change_1month_percentage', 'mf_holding_change_2month_percentage', 'mf_holding_change_3month_percentage', 'mf_holding_change_4qtr_percentage', 'mf_holding_change_8qtr_percentage', 'fii_holding_current_qtr_percentage', 'fii_holding_change_qoq_percentage', 'fii_holding_change_4qtr_percentage', 'fii_holding_change_8qtr_percentage', 'institutional_holding_current_qtr_percentage', 'institutional_holding_change_qoq_percentage', 'institutional_holding_change_4qtr_percentage', 'institutional_holding_change_8qtr_percentage']
#     df = pd.read_csv("stockdata.csv")
#     df.columns = colunm_name
#     df.drop('s.no', axis=1, inplace=True)
#     StockData.objects.all().delete()
#     StockData.objects.bulk_create([StockData(**vals) for vals in df.to_dict('records')])
#     return "Data read successfully"


